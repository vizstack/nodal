import { NodeSchema, EdgeSchema } from '../src';

const kSize = 15;

const kGraphCompound: {
    nodes: NodeSchema[],
    edges: EdgeSchema[],
} = {
    nodes: [
        { id: 'p0', children: [], meta: { group: 0 } },
        { id: 'p1', children: [], meta: { group: 1 } },
        { id: 'p2', children: [], meta: { group: 2 } },
        { id: 'p3', children: [], meta: { group: 3 } },
        { id: 'p4', children: [], meta: { group: 4 } },
        { id: 'p5', children: [], meta: { group: 5 } },
        { id: 'p6', children: [], meta: { group: 6 } },
        { id: 'p7', children: [], meta: { group: 7 } },
        { id: 'p8', children: [], meta: { group: 8 } },
        { id: 'p9', children: [], meta: { group: 9 } },
        { id: 'p10', children: [], meta: { group: 10 } },
    ],
    edges: [],
};

// prettier-ignore
const parents = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 4, 0, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 4, 6, 4, 4, 5, 0, 0, 7, 7, 8, 5, 5, 5, 5, 5, 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 4, 4, 4, 5, 10, 10, 4, 8,
];

const edges = [
    { s: 1, t: 0 },
    { s: 2, t: 0 },
    { s: 3, t: 0 },
    { s: 3, t: 2 },
    { s: 4, t: 0 },
    { s: 5, t: 0 },
    { s: 6, t: 0 },
    { s: 7, t: 0 },
    { s: 8, t: 0 },
    { s: 9, t: 0 },
    { s: 11, t: 10 },
    { s: 11, t: 3 },
    { s: 11, t: 2 },
    { s: 11, t: 0 },
    { s: 12, t: 11 },
    { s: 13, t: 11 },
    { s: 14, t: 11 },
    { s: 15, t: 11 },
    { s: 17, t: 16 },
    { s: 18, t: 16 },
    { s: 18, t: 17 },
    { s: 19, t: 16 },
    { s: 19, t: 17 },
    { s: 19, t: 18 },
    { s: 20, t: 16 },
    { s: 20, t: 17 },
    { s: 20, t: 18 },
    { s: 20, t: 19 },
    { s: 21, t: 16 },
    { s: 21, t: 17 },
    { s: 21, t: 18 },
    { s: 21, t: 19 },
    { s: 21, t: 20 },
    { s: 22, t: 16 },
    { s: 22, t: 17 },
    { s: 22, t: 18 },
    { s: 22, t: 19 },
    { s: 22, t: 20 },
    { s: 22, t: 21 },
    { s: 23, t: 16 },
    { s: 23, t: 17 },
    { s: 23, t: 18 },
    { s: 23, t: 19 },
    { s: 23, t: 20 },
    { s: 23, t: 21 },
    { s: 23, t: 22 },
    { s: 23, t: 12 },
    { s: 23, t: 11 },
    { s: 24, t: 23 },
    { s: 24, t: 11 },
    { s: 25, t: 24 },
    { s: 25, t: 23 },
    { s: 25, t: 11 },
    { s: 26, t: 24 },
    { s: 26, t: 11 },
    { s: 26, t: 16 },
    { s: 26, t: 25 },
    { s: 27, t: 11 },
    { s: 27, t: 23 },
    { s: 27, t: 25 },
    { s: 27, t: 24 },
    { s: 27, t: 26 },
    { s: 28, t: 11 },
    { s: 28, t: 27 },
    { s: 29, t: 23 },
    { s: 29, t: 27 },
    { s: 29, t: 11 },
    { s: 30, t: 23 },
    { s: 31, t: 30 },
    { s: 31, t: 11 },
    { s: 31, t: 23 },
    { s: 31, t: 27 },
    { s: 32, t: 11 },
    { s: 33, t: 11 },
    { s: 33, t: 27 },
    { s: 34, t: 11 },
    { s: 34, t: 29 },
    { s: 35, t: 11 },
    { s: 35, t: 34 },
    { s: 35, t: 29 },
    { s: 36, t: 34 },
    { s: 36, t: 35 },
    { s: 36, t: 11 },
    { s: 36, t: 29 },
    { s: 37, t: 34 },
    { s: 37, t: 35 },
    { s: 37, t: 36 },
    { s: 37, t: 11 },
    { s: 37, t: 29 },
    { s: 38, t: 34 },
    { s: 38, t: 35 },
    { s: 38, t: 36 },
    { s: 38, t: 37 },
    { s: 38, t: 11 },
    { s: 38, t: 29 },
    { s: 39, t: 25 },
    { s: 40, t: 25 },
    { s: 41, t: 24 },
    { s: 41, t: 25 },
    { s: 42, t: 41 },
    { s: 42, t: 25 },
    { s: 42, t: 24 },
    { s: 43, t: 11 },
    { s: 43, t: 26 },
    { s: 43, t: 27 },
    { s: 44, t: 28 },
    { s: 44, t: 11 },
    { s: 45, t: 28 },
    { s: 47, t: 46 },
    { s: 48, t: 47 },
    { s: 48, t: 25 },
    { s: 48, t: 27 },
    { s: 48, t: 11 },
    { s: 49, t: 26 },
    { s: 49, t: 11 },
    { s: 50, t: 49 },
    { s: 50, t: 24 },
    { s: 51, t: 49 },
    { s: 51, t: 26 },
    { s: 51, t: 11 },
    { s: 52, t: 51 },
    { s: 52, t: 39 },
    { s: 53, t: 51 },
    { s: 54, t: 51 },
    { s: 54, t: 49 },
    { s: 54, t: 26 },
    { s: 55, t: 51 },
    { s: 55, t: 49 },
    { s: 55, t: 39 },
    { s: 55, t: 54 },
    { s: 55, t: 26 },
    { s: 55, t: 11 },
    { s: 55, t: 16 },
    { s: 55, t: 25 },
    { s: 55, t: 41 },
    { s: 55, t: 48 },
    { s: 56, t: 49 },
    { s: 56, t: 55 },
    { s: 57, t: 55 },
    { s: 57, t: 41 },
    { s: 57, t: 48 },
    { s: 58, t: 55 },
    { s: 58, t: 48 },
    { s: 58, t: 27 },
    { s: 58, t: 57 },
    { s: 58, t: 11 },
    { s: 59, t: 58 },
    { s: 59, t: 55 },
    { s: 59, t: 48 },
    { s: 59, t: 57 },
    { s: 60, t: 48 },
    { s: 60, t: 58 },
    { s: 60, t: 59 },
    { s: 61, t: 48 },
    { s: 61, t: 58 },
    { s: 61, t: 60 },
    { s: 61, t: 59 },
    { s: 61, t: 57 },
    { s: 61, t: 55 },
    { s: 62, t: 55 },
    { s: 62, t: 58 },
    { s: 62, t: 59 },
    { s: 62, t: 48 },
    { s: 62, t: 57 },
    { s: 62, t: 41 },
    { s: 62, t: 61 },
    { s: 62, t: 60 },
    { s: 63, t: 59 },
    { s: 63, t: 48 },
    { s: 63, t: 62 },
    { s: 63, t: 57 },
    { s: 63, t: 58 },
    { s: 63, t: 61 },
    { s: 63, t: 60 },
    { s: 63, t: 55 },
    { s: 64, t: 55 },
    { s: 64, t: 62 },
    { s: 64, t: 48 },
    { s: 64, t: 63 },
    { s: 64, t: 58 },
    { s: 64, t: 61 },
    { s: 64, t: 60 },
    { s: 64, t: 59 },
    { s: 64, t: 57 },
    { s: 64, t: 11 },
    { s: 65, t: 63 },
    { s: 65, t: 64 },
    { s: 65, t: 48 },
    { s: 65, t: 62 },
    { s: 65, t: 58 },
    { s: 65, t: 61 },
    { s: 65, t: 60 },
    { s: 65, t: 59 },
    { s: 65, t: 57 },
    { s: 65, t: 55 },
    { s: 66, t: 64 },
    { s: 66, t: 58 },
    { s: 66, t: 59 },
    { s: 66, t: 62 },
    { s: 66, t: 65 },
    { s: 66, t: 48 },
    { s: 66, t: 63 },
    { s: 66, t: 61 },
    { s: 66, t: 60 },
    { s: 67, t: 57 },
    { s: 68, t: 25 },
    { s: 68, t: 11 },
    { s: 68, t: 24 },
    { s: 68, t: 27 },
    { s: 68, t: 48 },
    { s: 68, t: 41 },
    { s: 69, t: 25 },
    { s: 69, t: 68 },
    { s: 69, t: 11 },
    { s: 69, t: 24 },
    { s: 69, t: 27 },
    { s: 69, t: 48 },
    { s: 69, t: 41 },
    { s: 70, t: 25 },
    { s: 70, t: 69 },
    { s: 70, t: 68 },
    { s: 70, t: 11 },
    { s: 70, t: 24 },
    { s: 70, t: 27 },
    { s: 70, t: 41 },
    { s: 70, t: 58 },
    { s: 71, t: 27 },
    { s: 71, t: 69 },
    { s: 71, t: 68 },
    { s: 71, t: 70 },
    { s: 71, t: 11 },
    { s: 71, t: 48 },
    { s: 71, t: 41 },
    { s: 71, t: 25 },
    { s: 72, t: 26 },
    { s: 72, t: 27 },
    { s: 72, t: 11 },
    { s: 73, t: 48 },
    { s: 74, t: 48 },
    { s: 74, t: 73 },
    { s: 75, t: 69 },
    { s: 75, t: 68 },
    { s: 75, t: 25 },
    { s: 75, t: 48 },
    { s: 75, t: 41 },
    { s: 75, t: 70 },
    { s: 75, t: 71 },
    { s: 76, t: 64 },
    { s: 76, t: 65 },
    { s: 76, t: 66 },
    { s: 76, t: 63 },
    { s: 76, t: 62 },
    { s: 76, t: 48 },
    { s: 76, t: 58 },
];

parents.forEach((parent, child) => {
    kGraphCompound.nodes.push({ id: `n${child}`, shape: { type: 'rectangle', width: kSize, height: kSize }, meta: { group: parent } });
    kGraphCompound.nodes[parent].children!.push(`n${child}`);
});

edges.forEach(({ s, t }) => {
    kGraphCompound.edges.push(
        { id: `e${s}->${t}`, source: { id: `n${s}` }, target: { id: `n${t}` } }
    );
});

export { kGraphCompound };